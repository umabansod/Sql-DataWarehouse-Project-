/* 
*********************************************************
Stored Procedure : Load Silver Layer ( Bronze - > Silver)
*********************************************************

Purpose :
  This stored procedure performs the ETL (Extract, Transform, Load ) Process to 
  populate the 'silver' schema tables from the 'bronze' schemas.
Action Performed:
  - Truncates silver tables
  - Insert transformed and cleaned data from Bronze into silver tables.
Parameter 
  This stored procedure does not accept any parameters or return any values.
Usage Example :
  EXEC silver.load_silver;
*********************************************************
*/


EXEC silver.load_silver 
CREATE OR ALTER PROCEDURE silver.load_silver as 
BEGIN 
	Declare @start_time  datetime , @end_time  datetime , @Batch_start datetime, @Batch_end datetime ;
	BEGIN TRY

		SET @Batch_start = Getdate();
		Print '===============================================';
		print ' Loading Silver Layer ';
		print '===============================================';


		print '===============================================';
		print ' Loading CRM Tables';
		print '===============================================';


		--loading silver.crm_cust_info

		SET @start_time = GETDATE();
		PRINT '>> Truncating Table : Silver.crm_cust_info';
		Truncate table silver.crm_cust_info
		PRINT '>> Inserting Data Into : Silver.crm_cust_info';
		Insert into silver.crm_cust_info(
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_marital_status,
		cst_gndr,
		cst_create_date)
		select 
		cst_id,
		cst_key,
		trim(cst_firstname) as cst_firstname,
		trim(cst_lastname) as cst_lastname,
		case when upper(trim(cst_marital_status))='M' then 'Married'
			 when upper(trim(cst_marital_status))='S' then 'Single'
			 else 'n/a'
		END cst_marital_status,  -- Normalize marital status values to readable format
		case when upper(trim(cst_gndr)) ='M' THEN 'Male'
			when upper(trim(cst_gndr)) = 'F' THEN 'Female'
			else 'n/a'
		END cst_gndr, -- Normalize gender values to readable format
		cst_create_date
		from (
		SELECT *,
		ROW_NUMBER() OVER ( PARTITION BY cst_id ORDER BY cst_create_date DESC) flag
		FROM bronze.crm_cust_info where cst_id is not null)t
		where flag = 1;
		SET @end_time = GETDATE()
		print ' =====================================================';
		print ' Loading silver.crm_cust_info completed'
		print ' Time duration ' + cast(datediff(second , @start_time,@end_time) as Nvarchar ) +' Seconds.';
		print ' ======================================================';

		-- Loading silver.crm_prd_info;
		set @start_time = Getdate();
		PRINT '>> Truncating Table : silver.crm_prd_info';
		TRUNCATE TABLE silver.crm_prd_info;
		PRINT '>> Inserting Data Into : silver.crm_prd_info';

		INSERT INTO silver.crm_prd_info (
		prd_id,
		cat_id,
		prd_Key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt
		)
		select  
		prd_id,
		replace(substring(prd_key, 1, 5), '-', '_') AS cat_id, -- Extract Category ID 
		substring(prd_key, 7, len(prd_key)) as prd_key,		-- Extract Product key 
		prd_nm,
		ISNULL(prd_cost,0) AS prd_cost,
		CASE WHEN prd_line = 'M' THEN 'Mountain'
			WHEN prd_line = 'R' THEN 'Road'
			when prd_line = 'S' THEN 'Other sales'
			when prd_line = 'T' then 'Touring'
			else 'n/a'
		END AS prd_line , --- Map product line to descriptive values 
		CAST(prd_start_dt as date) as prd_start_dt,
		CAST(DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) as Date) 
		as prd_end_dt -- Calculate end date as one day before the next start date 
		from bronze.crm_prd_info
		set @end_time= Getdate()
		Print ' ==================================================='
		print ' Loading silver.crm_prd_info completed '
		print ' Time duration ' + CAST(datediff ( second, @start_time, @end_time ) as Nvarchar ) +' seconds.';
		print ' ==================================================='

		--- Loading silver.crm_sales_details.
		set @start_time = GETDATE()
		PRINT '>> Inserting Data Into : silver.crm_sales_details';
		TRUNCATE  TABLE silver.crm_sales_details;
		PRINT '>> Inserting Data Into : silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details (
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
		)
		SELECT 
		sls_ord_num,
		sls_prd_Key,
		sls_cust_id,
		case when sls_order_dt = 0 or len (sls_order_dt) != 8 then NULL
			ELSE CAST(CAST(sls_order_dt as varchar ) as date )
		end as sls_order_dt, 
		case when sls_ship_dt = 0 or len (sls_ship_dt) != 8 then NULL
			ELSE CAST(CAST(sls_ship_dt as varchar) as date)
		end as sls_ship_dt,
		case when sls_due_dt = 0 or len (sls_due_dt) != 8 then NULL
			ELSE CAST(CAST(sls_due_dt as varchar) as date)
		end as sls_due_dt,
		CASE WHEN sls_sales IS NULL OR sls_sales <= 0 or sls_sales != sls_quantity * abs(sls_price)
			THEN  sls_quantity * abs ( sls_price )	
		ELSE sls_sales		-- Recalculate sales if original value is null or negative or inaccurate 
		END as sls_sales ,
		sls_quantity,
		CASE WHEN sls_price  IS NULL OR sls_price <=0 
			THEN sls_sales / NULLIF(sls_quantity ,0 )
			ELSE sls_price
		END as sls_price	-- Derive price if original value is invalid 
		FROM bronze.crm_sales_details;
		set @end_time = GETDATE()

		print ' =========================================================='
		print ' Loading silver.crm_sales_details completed . '
		print ' Time Duration :' + cast(datediff(second, @start_time, @end_time ) as Nvarchar ) + ' seconds.'
		print ' =========================================================='


		print ' ==========================================================='
		print ' Loading ERP TABLE :'
		PRINT ' ==========================================================='

		-- Loading silver.erp_cust_az12.
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table : silver.erp_cust_az12 ';
		TRUNCATE TABLE silver.erp_cust_az12;
		PRINT '>> Inserting Data Into : silver.erp_cust_az12 ';
		INSERT INTO silver.erp_cust_az12 (
		 cid,
		 bdate,
		 gen
		 )
		SELECT 
			 CASE WHEN cid like 'NAS%' THEN substring(cid, 4, len(cid))
			 ELSE cid
			 END as cid,		-- Remove 'NAS' prefix if present 
			 CASE WHEN bdate > GETDATE() THEN NULL
			 ELSE bdate
			 END AS bdate,		-- set future bdate as null
			 CASE WHEN  UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) in ( 'M', 'MALE') THEN 'Male'
				ELSE 'n/a'
			END AS gen		-- Normalize gender values and handle unknown cases 
		 FROM bronze.erp_cust_az12;
		 Set @end_time = GETDATE()

		 print '======================================================'
		 print ' Loading silver.erp_cust_az12 Completed.'
		 print ' Time duration :' + cast(datediff(second,@start_time, @end_time)as nvarchar ) + ' Seconds.'
		 print '======================================================='



		-- Loading Silver.erp_loc_a101.
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table : silver.erp_loc_a101';

		TRUNCATE TABLE silver.erp_loc_a101;
		PRINT '>> Inserting Data Into : silver.erp_loc_a101';
		INSERT INTO silver.erp_loc_a101(
		CID,
		CNTRY
		)

		SELECT 
		REPLACE ( cid, '-','') cid,
		CASE when TRIM(cntry) = 'DE' THEN  'Germany'
			when TRIM(cntry) IN ('US','USA') THEN 'United States'
			WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
		ELSE TRIM(cntry)
		end as cntry
		from bronze.erp_loc_a101
		SET @end_time = GETDATE();
		PRINT ' ========================================================'
		PRINT ' Loading silver.erp_loc_a101 Completed.'
		print ' Time Duration :' + Cast ( datediff(second, @start_time, @end_time) as Nvarchar) + ' seconds.'
		print ' ========================================================'


		-- Loading Silver.erp_px_cat_glv2.
		set @start_time= GETDATE();
		PRINT '>> Truncating Table : silver.erp_px_cat_g1v2';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
	
		PRINT '>> Inserting Data Into : silver.erp_px_cat_g1v2';

		INSERT INTO silver.erp_px_cat_g1v2 
		(
		id, 
		cat,
		subcat,
		maintenance
		)
		select 
		id,
		cat,
		subcat,
		maintenance 
		from bronze.erp_px_cat_g1v2;
		set @end_time = GETDATE();
		print ' ==============================================='
		print ' Loading silver.erp_px_cat_glv2 completed.'
		print ' Time duration :' + cast ( datediff(second,@start_time, @end_time) as nvarchar ) +' seconds.'
		Print ' ==============================================='


		SET @Batch_end = Getdate();
		Print '==============================================================================='
		print ' Loading silver Layer completed.'
		Print ('Time duration for whole silver load :'+ cast (datediff(second, @Batch_start, @Batch_end) as Nvarchar) +' seconds.')
		print '==============================================================================='
	END TRY 
	BEGIN CATCH
		PRINT ' ========================================================'
		PRINT ' ERROR OCCURED DURING LOADING SILVER LAYER.'
		PRINT ' ERROR_MESSAGE' + ERROR_MESSAGE();
		PRINT ' ERROR MESSAGE' + CAST( ERROR_NUMBER() AS NVARCHAR);
		PRINT ' ========================================================'

	END CATCH 
END 
